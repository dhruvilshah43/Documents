#!/usr/bin/env python
import json
import urllib2,base64

if __name__ == '__main__':
    prefix ='rabbitmq cookbook chapter 10 .5'
    from subprocess import call
	call(["rm", "-rf", "/var/tmp/aws-mon"])
	call(["rabbitmqctl", "add_vhost", "/admin"])
	call(["rabbitmqctl", "add_user", "admin", "12345678"])
	call(["rabbitmqctl", "set_user_tags", "admin", "administrator"])
	call(["rabbitmqctl", "set_permissions", "-p", "/admin", "admin", ".*", ".*", ".*"])
	call(["rabbitmqctl", "set_policy", "-p", "/admin", "server-qa-cluster", ".*?", '
    try:
        _url = 'http://RabbitMQ-LoadBlancer-373979778.ap-south-1.elb.amazonaws.com:15672/api/nodes'
        print prefix + 'Get json info from ..' + _url
        request = urllib2.Request(_url)

        base64string = base64.encodestring('%s:%s' % ('admin', '12345678')).replace('\n', '')
        request.add_header("Authorization", "Basic %s" % base64string)
        data = json.load(urllib2.urlopen(request))
        print prefix + 'request ok... finding for running node'
        

        for r in data:
            if r.get('running'):
                print prefix + 'found running node to bind..'
                print prefix + 'node name: '+ r.get('name') +'- running:' + str(r.get('running'))
                from subprocess import call
                call(["rabbitmqctl", "join_cluster",r.get('name')])
                break;
        pass
    except Exception, e:
        print prefix + 'error during add node'
    finally:
        from subprocess import call
        call(["rabbitmqctl", "start_app"])
    pass
	
	
	
	
	
	
#!/usr/bin/env python
import json
import urllib2,base64

if __name__ == '__main__':
    prefix ='rabbitmq cookbook chapter 10 .5'
    from subprocess import call
    call(["rabbitmqctl", "stop_app"])
    call(["rabbitmqctl", "reset"])
    try:
        _url = 'http://RMQ-Master-NLB-c2bd1fbf54eb6998.elb.us-east-1.amazonaws.com:15672/api/nodes'
        print prefix + 'Get json info from ..' + _url
        request = urllib2.Request(_url)

        base64string = base64.encodestring('%s:%s' % ('test', 'test')).replace('\n', '')
        request.add_header("Authorization", "Basic %s" % base64string)
        data = json.load(urllib2.urlopen(request))
        print prefix + 'request ok... finding for running node'
        

        for r in data:
            if r.get('running'):
                print prefix + 'found running node to bind..'
                print prefix + 'node name: '+ r.get('name') +'- running:' + str(r.get('running'))
                from subprocess import call
                call(["rabbitmqctl", "join_cluster",r.get('name')])
                break;
        pass
    except Exception, e:
        print prefix + 'error during add node'
    finally:
        from subprocess import call
        call(["rabbitmqctl", "start_app"])
    pass